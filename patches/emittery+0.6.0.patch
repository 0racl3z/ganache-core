diff --git a/node_modules/emittery/index.d.ts b/node_modules/emittery/index.d.ts
index d386ddb..4373fbb 100644
--- a/node_modules/emittery/index.d.ts
+++ b/node_modules/emittery/index.d.ts
@@ -77,6 +77,8 @@ declare class Emittery {
 	*/
 	static readonly listenerRemoved: unique symbol;
 
+	init(){}
+
 	/**
 	Subscribe to an event.
 
@@ -256,12 +258,8 @@ declare namespace Emittery {
 	type UnsubscribeFn = () => void;
 	type EventNameFromDataMap<EventDataMap> = Extract<keyof EventDataMap, EventName>;
 
-	/**
-	Maps event names to their emitted data type.
-	*/
 	interface Events {
-		// Blocked by https://github.com/microsoft/TypeScript/issues/1863, should be
-		// `[eventName: EventName]: unknown;`
+		[eventName: string]: (...args: any[]) => any;
 	}
 
 	/**
@@ -296,28 +294,30 @@ declare namespace Emittery {
 	emitter.emit('end'); // TS compilation error
 	```
 	*/
-	class Typed<EventDataMap extends Events, EmptyEvents extends EventName = never> extends Emittery {
-		on<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, listener: (eventData: EventDataMap[Name]) => void): Emittery.UnsubscribeFn;
+	class Typed<EventDataMap extends Events, EmptyEvents extends EventName = never> {
+		on<Name extends EventNameFromDataMap<EventDataMap>>  (eventName: Name, listener: (eventData: Parameters<EventDataMap[Name]>[0]) => ReturnType<EventDataMap[Name]>): Emittery.UnsubscribeFn;
 		on<Name extends EmptyEvents>(eventName: Name, listener: () => void): Emittery.UnsubscribeFn;
 
-		events<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name): AsyncIterableIterator<EventDataMap[Name]>;
+		events<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name): AsyncIterableIterator<Parameters<EventDataMap[Name]>[0]>;
 
-		once<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name): Promise<EventDataMap[Name]>;
-		once<Name extends EmptyEvents>(eventName: Name): Promise<void>;
+		once<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, listener: (eventData: Parameters<EventDataMap[Name]>[0]) => ReturnType<EventDataMap[Name]>): Emittery.UnsubscribeFn;
+		once<Name extends EmptyEvents>(eventName: Name, listener: () => void): Emittery.UnsubscribeFn;
 
-		off<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, listener: (eventData: EventDataMap[Name]) => void): void;
+		off<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, listener: (eventData: Parameters<EventDataMap[Name]>[0]) => ReturnType<EventDataMap[Name]>): void;
 		off<Name extends EmptyEvents>(eventName: Name, listener: () => void): void;
 
-		onAny(listener: (eventName: EventNameFromDataMap<EventDataMap> | EmptyEvents, eventData?: EventDataMap[EventNameFromDataMap<EventDataMap>]) => void): Emittery.UnsubscribeFn;
+		onAny(listener: (eventName: EventNameFromDataMap<EventDataMap> | EmptyEvents, eventData?: EventDataMap[EventNameFromDataMap<EventDataMap>]) => ReturnType<EventDataMap[Name]>): Emittery.UnsubscribeFn;
 		anyEvent(): AsyncIterableIterator<[EventNameFromDataMap<EventDataMap>, EventDataMap[EventNameFromDataMap<EventDataMap>]]>;
 
-		offAny(listener: (eventName: EventNameFromDataMap<EventDataMap> | EmptyEvents, eventData?: EventDataMap[EventNameFromDataMap<EventDataMap>]) => void): void;
+		offAny(listener: (eventName: EventNameFromDataMap<EventDataMap> | EmptyEvents, eventData?: EventDataMap[EventNameFromDataMap<EventDataMap>]) => ReturnType<EventDataMap[Name]>): void;
 
-		emit<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, eventData: EventDataMap[Name]): Promise<void>;
+		emit<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, eventData: Parameters<EventDataMap[Name]>[0]): Promise<[ReturnType<EventDataMap[Name]>]>;
 		emit<Name extends EmptyEvents>(eventName: Name): Promise<void>;
 
-		emitSerial<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, eventData: EventDataMap[Name]): Promise<void>;
+		emitSerial<Name extends EventNameFromDataMap<EventDataMap>>(eventName: Name, eventData: Parameters<EventDataMap[Name]>[0]): Promise<[ReturnType<EventDataMap[Name]>]>;
 		emitSerial<Name extends EmptyEvents>(eventName: Name): Promise<void>;
+
+		clearListeners(eventName?: EventName): void;
 	}
 }
 
diff --git a/node_modules/emittery/index.js b/node_modules/emittery/index.js
index 5ddd3db..9a68c72 100644
--- a/node_modules/emittery/index.js
+++ b/node_modules/emittery/index.js
@@ -182,6 +182,10 @@ class Emittery {
 	}
 
 	constructor() {
+		this.init();	
+	}
+
+	init() {
 		anyMap.set(this, new Set());
 		eventsMap.set(this, new Map());
 		producersMap.set(this, new Map());
